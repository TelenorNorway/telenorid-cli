on:
  workflow_call:
    inputs:
      strategy:
        type: string
        required: true
        description: |
          'commit', 'semver' or 'exact'
      input:
        type: string
        required: true
        description: The value to pass to the given strategy
    outputs:
      version:
        value: ${{ jobs.version.outputs.version }}
      deploy:
        value: ${{ jobs.version.outputs.deploy }}
jobs:
  version:
    name: Versioning
    runs-on: ubuntu-latest
    outputs:
      version: |
        ${{
          inputs.strategy == 'commit' && steps.commit.outputs.version ||
          inputs.strategy == 'semver' && steps.semver.outputs.version ||
          inputs.strategy == 'exact' && steps.exact.outputs.version
        }}
      deploy: |
        ${{
          inputs.strategy == 'commit' && steps.commit.outputs.deploy ||
          inputs.strategy == 'semver' && steps.semver.outputs.deploy ||
          inputs.strategy == 'exact' && steps.exact.outputs.deploy
        }}
    steps:
      - name: Fail on invalid strategy
        run: exit 1
        if: |
          inputs.strategy != 'commit' &&
          inputs.strategy != 'semver' &&
          inputs.strategy != 'exact'
      - name: Exact versioning
        id: exact
        if: inputs.strategy == 'exact'
        run: |
          if grep -qE "^[0-9]+.[0-9]+.[0-9]+$" <<< $VERSION; then
            echo deploy=yes >> $GITHUB_OUTPUT
            echo version=v$VERSION >> $GITHUB_OUTPUT
          else
            echo ::error::Invalid version input, expected X.Y.Z, example 1.2.3
            echo deploy=no >> $GITHUB_OUTPUT
          fi
        env:
          VERSION: ${{ inputs.input }}
      - name: Commit message versioning
        id: commit
        if: inputs.strategy == 'commit'
        run: |
          if grep -qE "^v=[0-9]+.[0-9]+.[0-9]+$" <<< $VERSION; then
            echo deploy=yes >> $GITHUB_OUTPUT
            echo version=v$(echo $VERSION | cut -c 3-) >> $GITHUB_OUTPUT
          else
            echo ::error::Invalid version input, expected v=X.Y.Z, example v=1.2.3
            echo deploy=no >> $GITHUB_OUTPUT
          fi
        env:
          VERSION: ${{ inputs.input }}
      - name: Semver versioning
        id: semver
        if: inputs.strategy == 'semver'
        run: |
          case $FUNC in
            major|minor|patch)
              ;;
            *)
              echo "Invalid function '$FUNC'"
              exit 1
              ;;
          esac

          versions=($(git ls-remote --tags https://$TOKEN:@github.com/$REPOSITORY.git | awk '{ if ($2 ~ /^refs\/tags\/v[0-9]+\.[0-9]+\.[0-9]+/) print substr($2, 12) }'))
          length=${#versions[@]}

          if (( $length == 0 )); then
            echo deploy=yes >> $GITHUB_OUTPUT
            echo version=v0.1.0 >> $GITHUB_OUTPUT
            echo "No previous versions, defaulting to v0.1.0"
          else
            curl -o semver -s -f --fail-early https://raw.githubusercontent.com/fsaintjacques/semver-tool/1a547a75f946717223fb7ca821ba6f3f337e9aca/src/semver
            chmod +x semver
            ./semver --version

            max=${versions[0]}
            for version in ${versions[@]:1}; do
              if [[ $(./semver compare $version $max) == "1" ]]; then
                max=$version
              fi
            done
            echo deploy=yes >> $GITHUB_OUTPUT
            echo version=v$(./semver bump $FUNC $max) >> $GITHUB_OUTPUT
          fi
        env:
          TOKEN: ${{ github.token }}
          REPOSITORY: ${{ github.repository }}
          FUNC: ${{ inputs.input }}
