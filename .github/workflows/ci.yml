name: ci
on: [push, pull_request]
permissions:
  contents: write
jobs:
  qa-fmt:
    name: Quality Assurance / Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - run: deno fmt --check
  qa-lint:
    name: Quality Assurance / Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - run: deno lint
  qa-test:
    name: Quality Assurance / Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - run: deno test --allow-none
  versioning:
    name: Versioning
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
      deploy: ${{ steps.version.outputs.deploy }}
    steps:
      - name: Test version
        id: version
        if:
          github.ref == 'refs/heads/main' &&
          startsWith(github.event.head_commit.message, 'v=')
        env:
          MSG: ${{ github.event.head_commit.message }}
        run: |
          if grep -qE "^v=[0-9]+.[0-9]+.[0-9]+$" <<< $MSG; then
            echo deploy=yes >> $GITHUB_OUTPUT
            echo version=v$(echo $MSG | cut -c 3-) >> $GITHUB_OUTPUT
          fi
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [versioning]
    if: needs.versioning.outputs.deploy == 'yes'
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v3
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      - name: Apply version ${{ needs.versioning.outputs.version }}
        env:
          VERSION: ${{ needs.versioning.outputs.version }}
        run: printf "export default \"${VERSION}\";\n" > test.ts
      - name: Build (${{ matrix.target }})
        run: deno compile -A -o ${{matrix.target}} cli.ts
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: ${{ matrix.target }}
          retention-days: 1
  release:
    name: Release binaries
    runs-on: ubuntu-latest
    if: needs.versioning.outputs.deploy == 'yes'
    needs:
      - versioning
      - qa-fmt
      - qa-lint
      - qa-test
      - build
    permissions: write-all
    steps:
      - name: Verify builds
        if: |
          contains(needs.*.result, 'failure') ||
          contains(needs.*.result, 'cancelled')
        run: exit 1
      - uses: actions/checkout@v3
      - name: Apply version
        env:
          VERSION: ${{ needs.versioning.outputs.version }}
        run: |
          echo "export default \"${VERSION}\";\n" > version.ts
      - name: Create tag
        env:
          VERSION: ${{ needs.versioning.outputs.version }}
        run: |
          git add .
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -m release
          git tag -f $VERSION
          git push -u origin $VERSION
      - run: mkdir bin
      - uses: actions/download-artifact@v3
        with:
          path: bin/
      - name: Create release
        env:
          VERSION: ${{ needs.versioning.outputs.version }}
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create --verify-tag -t "Release $VERSION" -d "$VERSION" $(for filename in bin/*; do echo $filename; done)
